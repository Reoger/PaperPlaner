package hut.reoger.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import reoger.hut.paperplaner.bean.DbGuokr;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DB_GUOKR".
*/
public class DbGuokrDao extends AbstractDao<DbGuokr, Long> {

    public static final String TABLENAME = "DB_GUOKR";

    /**
     * Properties of entity DbGuokr.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property IsBookMark = new Property(1, boolean.class, "isBookMark", false, "IS_BOOK_MARK");
        public final static Property Guokr_id = new Property(2, int.class, "guokr_id", false, "GUOKR_ID");
        public final static Property Guolkr_news = new Property(3, String.class, "guolkr_news", false, "GUOLKR_NEWS");
        public final static Property Guokr_time = new Property(4, float.class, "guokr_time", false, "GUOKR_TIME");
        public final static Property Guokr_content = new Property(5, String.class, "guokr_content", false, "GUOKR_CONTENT");
    }


    public DbGuokrDao(DaoConfig config) {
        super(config);
    }
    
    public DbGuokrDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DB_GUOKR\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"IS_BOOK_MARK\" INTEGER NOT NULL ," + // 1: isBookMark
                "\"GUOKR_ID\" INTEGER NOT NULL UNIQUE ," + // 2: guokr_id
                "\"GUOLKR_NEWS\" TEXT," + // 3: guolkr_news
                "\"GUOKR_TIME\" REAL NOT NULL ," + // 4: guokr_time
                "\"GUOKR_CONTENT\" TEXT);"); // 5: guokr_content
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DB_GUOKR\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DbGuokr entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getIsBookMark() ? 1L: 0L);
        stmt.bindLong(3, entity.getGuokr_id());
 
        String guolkr_news = entity.getGuolkr_news();
        if (guolkr_news != null) {
            stmt.bindString(4, guolkr_news);
        }
        stmt.bindDouble(5, entity.getGuokr_time());
 
        String guokr_content = entity.getGuokr_content();
        if (guokr_content != null) {
            stmt.bindString(6, guokr_content);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DbGuokr entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getIsBookMark() ? 1L: 0L);
        stmt.bindLong(3, entity.getGuokr_id());
 
        String guolkr_news = entity.getGuolkr_news();
        if (guolkr_news != null) {
            stmt.bindString(4, guolkr_news);
        }
        stmt.bindDouble(5, entity.getGuokr_time());
 
        String guokr_content = entity.getGuokr_content();
        if (guokr_content != null) {
            stmt.bindString(6, guokr_content);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DbGuokr readEntity(Cursor cursor, int offset) {
        DbGuokr entity = new DbGuokr( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getShort(offset + 1) != 0, // isBookMark
            cursor.getInt(offset + 2), // guokr_id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // guolkr_news
            cursor.getFloat(offset + 4), // guokr_time
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // guokr_content
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DbGuokr entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIsBookMark(cursor.getShort(offset + 1) != 0);
        entity.setGuokr_id(cursor.getInt(offset + 2));
        entity.setGuolkr_news(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setGuokr_time(cursor.getFloat(offset + 4));
        entity.setGuokr_content(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DbGuokr entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DbGuokr entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DbGuokr entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
