package hut.reoger.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import reoger.hut.paperplaner.bean.DbDouban;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DB_DOUBAN".
*/
public class DbDoubanDao extends AbstractDao<DbDouban, Long> {

    public static final String TABLENAME = "DB_DOUBAN";

    /**
     * Properties of entity DbDouban.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Douban_id = new Property(0, Long.class, "douban_id", true, "_id");
        public final static Property Douban_news = new Property(1, String.class, "douban_news", false, "DOUBAN_NEWS");
        public final static Property Douban_time = new Property(2, float.class, "douban_time", false, "DOUBAN_TIME");
        public final static Property Douban_content = new Property(3, String.class, "douban_content", false, "DOUBAN_CONTENT");
        public final static Property IsBookMark = new Property(4, boolean.class, "isBookMark", false, "IS_BOOK_MARK");
    }


    public DbDoubanDao(DaoConfig config) {
        super(config);
    }
    
    public DbDoubanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DB_DOUBAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: douban_id
                "\"DOUBAN_NEWS\" TEXT," + // 1: douban_news
                "\"DOUBAN_TIME\" REAL NOT NULL ," + // 2: douban_time
                "\"DOUBAN_CONTENT\" TEXT," + // 3: douban_content
                "\"IS_BOOK_MARK\" INTEGER NOT NULL );"); // 4: isBookMark
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DB_DOUBAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DbDouban entity) {
        stmt.clearBindings();
 
        Long douban_id = entity.getDouban_id();
        if (douban_id != null) {
            stmt.bindLong(1, douban_id);
        }
 
        String douban_news = entity.getDouban_news();
        if (douban_news != null) {
            stmt.bindString(2, douban_news);
        }
        stmt.bindDouble(3, entity.getDouban_time());
 
        String douban_content = entity.getDouban_content();
        if (douban_content != null) {
            stmt.bindString(4, douban_content);
        }
        stmt.bindLong(5, entity.getIsBookMark() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DbDouban entity) {
        stmt.clearBindings();
 
        Long douban_id = entity.getDouban_id();
        if (douban_id != null) {
            stmt.bindLong(1, douban_id);
        }
 
        String douban_news = entity.getDouban_news();
        if (douban_news != null) {
            stmt.bindString(2, douban_news);
        }
        stmt.bindDouble(3, entity.getDouban_time());
 
        String douban_content = entity.getDouban_content();
        if (douban_content != null) {
            stmt.bindString(4, douban_content);
        }
        stmt.bindLong(5, entity.getIsBookMark() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DbDouban readEntity(Cursor cursor, int offset) {
        DbDouban entity = new DbDouban( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // douban_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // douban_news
            cursor.getFloat(offset + 2), // douban_time
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // douban_content
            cursor.getShort(offset + 4) != 0 // isBookMark
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DbDouban entity, int offset) {
        entity.setDouban_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDouban_news(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDouban_time(cursor.getFloat(offset + 2));
        entity.setDouban_content(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIsBookMark(cursor.getShort(offset + 4) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DbDouban entity, long rowId) {
        entity.setDouban_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DbDouban entity) {
        if(entity != null) {
            return entity.getDouban_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DbDouban entity) {
        return entity.getDouban_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
